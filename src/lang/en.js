'use strict'

exports.__esModule = true
exports.default = {
  global: {
    add: 'Add',
    create: 'Create',
    update: 'Update',
    copy: 'Copy',
    edit: 'Edit',
    delete: 'Delete',
    validate: 'Validate',
    confirm: 'Confirm',
    cancel: 'Cancel',
    save: 'Save',
    refresh: 'Refresh',
    creator: 'Creator',
    canceller: 'Canceller',
    operation: 'Operation',
    successfullySaved: 'Successfully saved',
    helpDoc: 'help doc',
    document: 'document',
    enterprisefeaturesReferforDetails: 'Enterprise Edition features, please refer to for details',
    enterpriseWorkflowReferforDetails: 'Enterprise Edition supports customizing and publishing workflow template libraries, please refer to for details',
    help: 'Help',
    desc: 'Description',
    type: 'Type',
    var: 'Variables',
    status: 'Status',
    name: 'Name',
    tips: 'Tips',
    serviceName: 'Service Name',
    realTimeLog: 'Real Time Log',
    inputDesc: 'Please input description',
    loading: 'Loading...',
    project: 'Project',
    workflow: 'Workflow',
    build: 'Build',
    workflowName: 'workflowName',
    workflowID: 'workflowID',
    number: 'Number',
    whetherToDisplay: 'Whether To Display',
    addConfig: 'Add Config',
    pleaseInput: 'Please input',
    pleaseSelect: 'Please select',
    timeout: 'Timeout',
    all: 'All',
    key: 'Key',
    value: 'Value',
    fileDirectory: 'File Directory',
    testName: 'Test Name',
    repository: 'Repository',
    gitMessage: 'Repository Info',
    errorMsg: 'Error Message',
    ok: 'ok',
    startTime: 'Start Time',
    endTime: 'End Time',
    execute: 'Run',
    confirmation: 'Confirm',
    inputName: 'Please input',
    inputKey: 'Please input key',
    inputValue: 'Please input value',
    code: 'Code',
    host: 'Host',
    string: 'String',
    enumerate: 'Enumerate',
    multilineText: 'Multiline Text',
    emptyText: 'Empty',
    setting: 'Setting',
    importFromRepository: 'Import from repository',
    view: 'View',
    clear: 'Clear',
    search: 'Search',
    serviceEntrypoint: 'Entrypoint',
    detail: 'Detail',
    sync: 'Sync',
    autoSync: 'Auto-sync',
    import: 'Import',
    bulkImport: 'Bulk Import',
    reset: 'Reset',
    apply: 'Apply',
    skip: 'Skip',
    preview: 'Preview',
    back: 'Back',
    remove: 'Remove',
    download: 'Download',
    basicInfo: 'Basic Info',
    retry: 'Retry',
    expand: 'Expand',
    collapse: 'Collapse',
    defaultValue: 'Default Value',
    serviceModule: 'Service Module',
    templates: 'Templates',
    updateTime: 'Update Time',
    lastModified: 'Last Modified',
    autoCancel: 'Auto Cancel'
  },
  metaTitle: {
    projectDetail: 'Project Detail',
    workflowDetail: 'Workflow Detail',
    taskDetail: 'Task Detail',
    testDetail: 'Test Detail',
    buildDetail: 'Build Detail',
    testTaskDetail: 'Test Task Detail',
    scanningTaskDetail: 'Scanning Task Detail',
    envDetail: 'Environment Detail',
    serviceDetail: 'Service Detail',
    createProject: 'Create Project',
    createBuild: 'Create Build',
    createWorkflow: 'Create Workflow',
    editWorkflow: 'Edit Workflow',
    testReport: 'Test Report',
    taskList: 'Task List',
    createScanning: 'Create Scanning',
    editScanning: 'Edit Scanning',
    createVersion: 'Create Version',
    versionDetail: 'Version Detail',
    addTest: 'Create Test',
    serviceConfiguration: 'Service Configuration',
    envConfiguration: 'Environment Configuration',
    chartTemplates: 'Chart Template',
    dockerfileTemplates: 'Dockerfile Template',
    k8sTemplates: 'Kubernetes YAML Template',
    buildTemplates: 'Build Template',
    workflowTemplates: 'Workflow Template',
    editWorkflowTemplate: 'Edit Workflow Template'
  },
  permission: {
    lackPermission: 'Unauthorized'
  },
  login: {
    username: 'Username',
    password: 'Password',
    mail: 'mail',
    inputUsername: 'Please input username',
    inputPass: 'Please input password',
    inputMail: 'Please input mail',
    inputMailCheck: 'Please check the email format',
    inputUserInfo: 'Please input user info',
    inputNewPass: 'Please input new password',
    inputNewPassAgain: 'Please input new password again',
    passwordDontMatch: "Password don't match!",
    passwordLength: 'Password should be no less than 8 characters',
    signIn: 'Sign in',
    signUp: 'Sign up',
    forgotPassword: 'Forgot password',
    resetPassword: 'Reset password',
    resetSuccess: 'Reset successfully',
    confirmReset: 'Confirm reset',
    next: 'Next',
    resetLinkTip: 'The password reset link has been sent to your registered email address',
    setNewPassword: 'Set new password',
    sloganTitle: 'Let engineers focus more on creating',
    sloganDesc: 'The cloud-native continuous delivery platform engineers love: with important features such as flexible and easy-to-use high concurrency workflow, developer-oriented cloud-native environment, efficient and collaborative test management, powerful and maintenance-free template library, objective and accurate performance insights, and cloud-native IDE plugins to provide a unified collaboration plane for engineers.',
    companyInfo: 'KodeRover Technology Co., Ltd.'
  },
  signUp: {
    username: 'Username',
    password: 'Password',
    mail: 'mail',
    nickname: 'Nickname',
    inputUsername: 'Please input username',
    inputPass: 'Please input password',
    inputNickname: 'Please input nickname',
    inputMail: 'Please input mail',
    inputMailCheck: 'Please check the email format',
    inputUserInfo: 'Please input user info',
    signUp: 'Sign up',
    signUpSuccess: 'Registration is successful, please login'
  },
  sidebarMenu: {
    productDelivery: 'Product Delivery',
    status: 'Status',
    dashboard: 'Dashboard',
    projects: 'Projects',
    forum: 'Forum',
    testCenter: 'Tests',
    deliveryCenter: 'Delivery',
    dataViews: 'Statistics',
    dataOverview: 'Overview',
    dataInsight: 'Insights',
    setting: 'Settings',
    sysSetting: 'System Setting',
    integration: 'Integrations',
    systemIntegration: 'Integrations',
    packages: 'Packages',
    images: 'Images',
    plugins: 'Plugins',
    infraIntegration: 'Infrastructure',
    dockerRegistry: 'Registry',
    objectStorage: 'Storage',
    helmRepo: 'HELM Repo',
    clusters: 'Clusters',
    hosts: 'Hosts',
    system: 'System',
    settings: 'Settings',
    users: 'Users',
    announcement: 'Announcement',
    auditLog: 'Audit Log',
    profile: 'Profile',
    preference: 'Preference',
    enterprise: 'Enterprise',
    enterpriseInfo: 'Enterprise Info',
    license: 'License',
    releaseCenter: 'Release',
    releaseWorkflows: 'Workflows',
    environmentGroups: 'Environments',
    customerDelivery: 'Customer Delivery',
    deliveryBoard: 'Board',
    deliveryVersion: 'Version',
    deliveryCustomers: 'Customers'
  },
  topbarMenu: {
    search: 'Search',
    username: 'Username',
    admin: 'Admin',
    user: 'User',
    users: 'Users',
    sysSetting: 'System Setting',
    enterprise: 'Enterprise',
    profile: 'Profile',
    signOut: 'Sign Out'
  },
  subTopbarMenu: {
    projects: 'Projects',
    workflows: 'Workflows',
    environments: 'Environments',
    templates: 'Templates',
    services: 'Services',
    builds: 'Builds',
    tests: 'Tests',
    scannings: 'Code Scanning',
    versions: 'Versions',
    buildTemplates: 'Build Templates',
    createWorkflow: 'Create',
    createEnvironment: 'Create',
    testEnvironment: 'Test Environment',
    productionEnvironment: 'Production Environment',
    createBuild: 'Create',
    createTest: 'Create',
    createScanner: 'Create',
    createVersion: 'Create',
    changeProjectType: 'Change project type',
    projectConfig: 'Config',
    editProject: 'Edit',
    hostManagement: 'Hosts',
    projectPermission: 'Permission',
    projectCollaborationMode: 'Collaboration Mode',
    varsGroup: 'Vars Group',
    changeProjectTypeFirstTip: 'Change from "Hosting Projects" to "K8s YAML Projects" and confirm the resources within the project',
    changeProjectTypeSecondTip: '1. Existing project resources will not change, new service management capabilities will be added',
    changeProjectTypeThirdTip: '2. All services in the hosted project will be included in the service management and the associated workloads in the environment will be configured as services',
    changeProjectTypeFourthTip: '3. Changing operation is irreversible, please operate with caution',
    changeProjectTypeConfirm: 'Are you sure to change project type?',
    changeProjectTypeSuccess: 'Type changed successfully!',
    cancelChangeProjectType: 'Change project type has been cancelled'
  },
  profile: {
    profile: 'Profile',
    changePassword: 'Change Password',
    oldPassword: 'Old password',
    newPassword: 'New password',
    confirmNewPassword: 'Confirm new password',
    changeMail: 'Change Mail',
    oldMail: 'Old mail',
    newMail: 'New mail',
    inputMail: 'Please input enterprise mail',
    pleaseCheckMail: 'Please check the email format',
    changePhone: 'Change Phone',
    oldPhone: 'Old phone',
    newPhone: 'New phone',
    inputPhone: 'Please input phone',
    pleaseCheckPhone: 'Please check the phone format',
    admin: 'Admin',
    user: 'User',
    lastAccessedOn: 'Last accessed on',
    source: 'Source',
    system: 'System',
    updatePassword: 'Update password',
    updateMail: 'Update mail',
    updatePhone: 'Update phone',
    clickToChange: 'Click to change',
    notificationSetting: 'Notification setting',
    workflowStatusChanged: 'Workflow status changed',
    inputNewPass: 'Please input new password',
    inputOldPass: 'Please input old password',
    inputNewPassAgain: 'Please input new password again',
    passwordDontMatch: "Password don't match!",
    copiedToClipboard: 'Copied to clipboard',
    copyFailed: 'Copy failed',
    passwordChangedSuccessfully: 'Password changed successfully',
    mailChangedSuccessfully: 'Mail changed successfully',
    phoneChangedSuccessfully: 'Phone changed successfully',
    notificationSettingSavedSuccessfully: 'Notification setting saved successfully',
    uiTheme: 'UI theme',
    logColor: 'Log color',
    backgroundColor: 'Background',
    fontColor: 'Font color',
    defaultTheme: 'Defaut theme',
    darkTheme: 'Dark theme',
    inputColorHex: 'Please input color hex',
    checkColorHex: 'Please check color hex',
    preferenceChangedSuccessfully: 'Preference changed successfully'
  },
  status: {
    noRunningTask: 'No running tasks ',
    productWorkflow: 'Product Workflow',
    workflow: 'Workflow',
    codeScanning: 'Code Scanning',
    viewTaskDetail: 'View task detail',
    hideTaskDetail: 'Hide task detail',
    deleteTask: 'Delete task',
    build: 'Build',
    unitTest: 'Unit Test',
    coverage: 'Coverage',
    branch: 'Branch',
    buildInfo: 'Build Info',
    scriptBuilding: 'Runing Script',
    imgInfo: 'Image',
    imgBuilding: 'Build Image',
    deploy: 'Deploy',
    updateEnv: 'Update Environment',
    service: 'Service',
    env: 'Environment',
    image: 'Image',
    test: 'Test',
    testReport: 'Test Report',
    distribute: 'Distribute',
    distributeImage: 'Distribute Image',
    imageRepo: 'Image Repo',
    imageName: 'Image Name',
    queued: 'Queued',
    success: 'Success',
    cancelQueuedTaskSuccess: 'Queued task cancellation success',
    cancelRunningTaskSuccess: 'Running task cancellation success',
    buildStatus: 'Status',
    deployStatus: 'Status'
  },
  project: {
    searchProject: 'Search Project',
    newProject: 'New project',
    templates: 'Templates',
    buildTemplate: 'Build',
    workflowTemplate: 'Workflow',
    editProject: 'Edit',
    deleteProject: 'Delete',
    privateProject: 'Private project',
    workflows: 'Workflows',
    environments: 'Environments',
    tests: 'Tests',
    services: 'Services',
    builds: 'Builds',
    codeScanning: 'Code Scanning',
    versions: 'Versions',
    artifacts: 'Artifacts',
    clusters: 'Clusters',
    noProjects: 'There is no item to show, please add',
    projectName: 'Name',
    environmentCounts: 'Environments',
    environmentsList: 'Environments',
    workflowsList: 'Workflows',
    workflowStage: 'Stages',
    lastUpdated: 'Last Updated',
    clusterInfo: 'Cluster',
    localCluster: 'Local',
    updates: 'Updates',
    projectDetail: 'Detail',
    createProjectComp: {
      projectIdentifier: 'Identifier',
      projectIdentifierTip: "The project identifier is a globally unique identifier of the project's resources, used for referencing and updating all resources under the project,automatically generated by default, supports manual editing, can't be changed after creation",
      type: 'Type',
      yamlProject: 'K8s YAML Project',
      yamlPath: 'YAML Path',
      yamlProjectFirstDesc: 'Kubernetes',
      yamlProjectSecondDesc: 'Managing and Deploying Services with Kubernetes YAML',
      helmProject: 'K8s Helm Chart Project',
      helmProjectFirstDesc: 'Kubernetes',
      helmProjectSecondDesc: 'Manage and deploy services with Helm Chart',
      hostingProject: 'K8s Hosting Project',
      hostingProjectFirstDesc: 'Hosting resources in existing Kubernetes clusters',
      hostingProjectSecondDesc: 'Service image updates are supported',
      hostsProject: 'Hosts Projects',
      hostsProjectFirstDesc: 'Using the cloud host',
      hostsProjectSecondDesc: 'Deploy and upgrade services using custom scripts',
      compatibility: 'Compatibility',
      advancedConfigurations: 'Advanced Configurations',
      accessPermission: 'Access',
      projectAdministrator: 'Administrator',
      private: 'Private',
      privateDesc: 'The project is not visible to normal users by default, project administrators can add members and configure the appropriate permissions.',
      public: 'Public',
      publicDesc: 'Users have public access by default to view workflows, environments, services, builds, tests, and other resources in the project.',
      inputUsernameToSearch: 'Please input name to search',
      selectCluster: 'Please select clusters',
      specifiedCluster: 'Clusters',
      confirmUpdate: 'Update',
      createNow: 'Create',
      inputProjectName: 'Please input project name',
      selectProjectAdmin: 'Please select project administrator',
      selectProjectAccessPermission: 'Please select permission',
      inputProjectIdentifier: 'Please input project identifier',
      inputProjectIdentifierCheck: 'Only lowercase letters and numbers are supported, and hyphens are supported in special characters',
      successfullySaved: 'Projects have been successfully created',
      successfullyUpdated: 'Projects have been successfully updated',
      createProject: 'Create Project',
      editProjectInfo: 'Edit Project'
    },
    deleteProjectComp: {
      inputProjectNameToDelete: 'Please input project name {projectName} to confirm',
      deleteExternalProjectTip: 'The following resources under this project will be unhosted,',
      deleteProjectTip: 'The following resources under this project will be deleted at the same time,',
      deleteProjectCaution: 'Please proceed with caution !!',
      deleteK8sNamespace: 'Delete the K8s namespace and services',
      projectNameDontMatch: 'Project name does not match',
      successfullyDeleted: 'Projects have been successfully deleted'
    },
    onboardingComp: {
      projectOnboarding: 'Onboarding',
      projectConfiguration: 'Configuration',
      createService: 'Add Services',
      joinToEnvironment: 'Environments',
      configureEnv: 'Configure Env',
      runWorkflow: 'Run Workflow',
      devEnv: 'Dev Environment',
      testEnv: 'Test Environment',
      preReleaseEnv: 'Pre-relase Environment',
      firstStep: 'First Step',
      firstStepTip: 'Once you have created your project, we will prepare you for intelligent delivery as follows, Zadig will automatically generate the following resources:',
      hostingFirstStepTip: 'Host existing K8s cluster resources and please select services to be managed in Zadig',
      envCountTip: '2 Test environments',
      workflowCountTip: '3 Workflows',
      secondStep: 'Second Step',
      secondStepTip: 'Create service templates that can be reconfigured later in the project',
      hostingSecondStepTip: 'Add a build and configure the build scripts to automatically update the service in the workflow later',
      thirdStep: 'Third Step',
      thirdStepTip: 'Create environments on demand, which can be changed later in the project.',
      thirdStepEnterpriseDocument: 'Enterprise Edition supports quick import of existing service configurations, please refer to for details',
      hostingThirdStepTip: 'Run workflows to trigger automated delivery of services',
      cloudHostThirdStepTip: 'Add the service to the environment and prepare the delivery workflow, which can be configured later in the project',
      fourthStep: 'Fourth Step',
      fourthStepTip: 'Run workflows to trigger automated delivery of services',
      nextStep: 'Next',
      clickNextTip: 'Please click next button',
      finish: 'Finish',
      envName: 'Env Name',
      updateTime: 'Update Time',
      workflowStages: 'Stages',
      clickToRun: 'Run',
      skipOnboarding: 'Skip',
      configureTheFollowingEnvironments: 'Configure the following environments:',
      configureEnvHosting: 'Configure hosting',
      configureServiceBuild: 'Configure build',
      environmentsPreparation: 'Environments',
      environmentDevPreparationTip: 'Dev environment:{projectName}-dev, development of daily self-testing，integration testing',
      environmentTestPreparationTip: 'Test environment: {projectName}-qa, automated testing',
      environmentsPreparationTimeoutTip: 'The environment is being prepared, you can click "Next" or',
      toViewEnvironmentStatus: 'view status',
      workflowsPreparation: 'Workflows',
      workflowDevPreparation: 'Dev workflow:{projectName}-workflow-dev, service daily upgrade, for development self-testing and integration testing',
      workflowTestPreparation: 'Test workflow:{projectName}-workflow-qa, service on-demand upgrade for automated testing and business acceptance',
      workflowOpsPreparation: 'Ops workflow: {projectName}-ops-workflow, service on-demand releases for version upgrades'
    },
    rbac: {
      membersManagement: 'Members Management',
      membersManagementTip: 'Project member management, mainly used to define the roles of project members',
      addMember: 'Add member',
      projectMember: 'Project Member',
      allUsers: 'All users',
      username: 'Username',
      inputUsernameToSearch: 'Please input username to search',
      role: 'Role',
      selectUser: 'Please select user',
      selectRole: 'Please select role',
      inputRoleName: 'Please input role name',
      checkRoleName: 'Name should only contain lowercase alphanumeric characters and -',
      policy: 'Policy',
      remove: 'Remove',
      removePolicyTooltip: "The user is in project collaboration mode, the corresponding policy can't be removed directly, please remove the user from the collaboration mode first",
      removeReadOnlyTooltip: 'All users have read-only privileges, which can be removed via Project Configuration -> Set Access Permissions to Private',
      confirmToDeleteMember: 'Are you sure to delete this member?',
      systemBuiltIn: '(System built-in)',
      identityTypeSystem: 'System',
      rolesManagement: 'Roles Management',
      rolesManagementTip: 'Project role management, mainly used to define the role of the project',
      addRole: 'Add role',
      roleName: 'Role Name',
      roleType: 'Type',
      permissionList: 'Permission List',
      selectAtLeastOnePermission: 'Please select at least one permission',
      publicRole: 'Public Role',
      privateRole: 'Private Role',
      inputRoleNameToSearch: 'Please input role name to search',
      deleteRoleTip: 'The member permission of this role will also be deleted, so please operate with caution',
      confirmToDeleteRole: 'Are you sure to delete this role?',
      policyManagement: 'Policy Management',
      policyManagementTip: 'Once a user is associated with a policy, the user is granted the permissions described in the policy',
      policyName: 'Policy Name',
      policyDesc: 'Description',
      policyModifiedTime: 'Modified Time',
      permissionManagement: 'Permission'
    },
    varsGroup: {
      name: 'Name',
      inputVarsGroupName: 'Please input vars group name',
      inputVarsGroupYaml: 'Please enter the YAML format variables',
      confirmToDeleteVarsGroup: 'Are you sure to delete {name}?',
      deleteVarsGroupSuccess: 'Variable group {name} deleted successfully!'
    }
  },
  templates: {
    k8sYaml: {
      noTemplate: 'There is no template, click',
      createTemplate: 'to create template',
      createTemplateTooltip: 'Create template',
      selectTemplateToEdit: 'Select the template you want to edit',
      inputTemplateName: 'Type in template name',
      searchTemplate: 'Search template',
      templateNameIsDuplicated: 'Duplicate template name',
      confirm: 'Confirm',
      confirmToDeleteTemplate: 'Are you sure to delete template {name}?',
      successfullyDeleted: 'Template deleted',
      tip: 'Tip',
      confirmToSaveTemplate: 'Changes to the template are not saved, do you want to save it?',
      variablesList: 'Variables List',
      referenceList: 'Reference List',
      projectName: 'Project Name',
      systemVariables: 'System Variables',
      customVariables: 'Custom Variables',
      customVariablesTooltip: 'Custom variables are declared with {{.key}}',
      noneVariable: 'None',
      saveTemplateFirst: 'Please save the template first',
      validationSuccess: 'Validation is successful',
      successfullySaved: 'Variables have been successfully saved',
      applyToServices: 'Apply to services',
      successfullyUpdated: 'Template "{fileName}" updated',
      successfullyCreated: 'Template "{fileName}" created',
      applyToServicesTooltip: 'All services with "Auto Sync" enabled will apply the latest template.',
      confirmToApply: 'Confirm to apply',
      applyToServicesSuccessfully: 'Template applied to service.'
    },
    helmChart: {
      chooseSource: 'Choose the source to load',
      createTemplate: 'Create Template',
      templateName: 'Template Name',
      inputTemplateName: 'Type in template name',
      update: 'Update',
      load: 'Load',
      updateSuccess: 'Template "{name}" updated',
      loadSuccess: 'Template "{name}" loaded',
      confirm: 'Confirm',
      confirmToDeleteTemplate: 'Are you sure to delete template {name}?',
      successfullyDeleted: 'Template deleted',
      cancelDeletingTemplate: 'Template deletion cancelled',
      variablesList: 'Variables List',
      referenceList: 'Reference List',
      systemVariables: 'System Variables',
      customVariables: 'Custom Variables',
      customVariablesTooltip: 'Custom variables are declared with {{.key}}',
      noneVariable: 'None',
      applyToServices: 'Apply to services',
      emptyService: 'Empty service',
      saveCustomVariablesSuccess: 'Custom variables saved.',
      saveCustomVariablesFailed: 'Save custom variables failed：{message}',
      applyToServicesTooltip: 'All services with "Auto Sync" enabled will apply the latest template.',
      confirmToApply: 'Are you sure to apply to the service?',
      applyToServicesSuccessfully: 'Template applied to service.'
    },
    dockerfile: {
      noTemplate: 'There is no template, click',
      createTemplate: 'Create template',
      createTemplateTooltip: 'to create template',
      inputTemplateName: 'Type in template name',
      templateNameIsDuplicated: 'Duplicate template name',
      selectTemplateToEdit: 'Select the template you want to edit',
      searchTemplate: 'Search template',
      variablesList: 'Variable List',
      referenceList: 'Reference List',
      noneVariable: 'None',
      templateUpdated: 'Template {name} updated',
      templateCreated: 'Template {name} created',
      templateDeleted: 'Template deleted',
      deleteConfirmation: 'Are you sure to delete template {name}?',
      confirmToSaveTemplate: 'Changes to the template are not saved, do you want to save it?',
      deleteChange: 'Discard'
    },
    build: {
      noTemplate: 'There is no template, click',
      createTemplate: 'Create template',
      createTemplateTooltip: 'to create template',
      inputTemplateName: 'Type in template name',
      templateNameIsDuplicated: 'Duplicate template name',
      selectTemplateToEdit: 'Select the template you want to edit',
      searchTemplate: 'Search template',
      referenceList: 'Reference List',
      buildName: 'Build Name',
      noneVariable: 'None',
      deleteConfirmation: 'Are you sure to delete template {name}?',
      templateDeleted: 'Deleted',
      confirmToSaveTemplate: 'Changes to the template are not saved, do you want to save it?',
      deleteChange: 'Discard'
    }
  },
  workflowTaskStatus: {
    notRunning: 'Not running',
    created: 'Created',
    waiting: 'Waiting',
    running: 'Running',
    failed: 'Failed',
    passed: 'Passed',
    timeout: 'Timeout',
    cancelled: 'Cancelled',
    blocked: 'Blocked',
    queued: 'Queued',
    skipped: 'Skipped',
    prepare: 'Preparing',
    reject: 'Rejected',
    pending: 'Pending'
  },
  workflow: {
    workflowName: 'Workflow Name',
    ascendingByName: 'Ascending by name',
    descendingByName: 'Descending by name',
    ascendingByCreationTime: 'Ascending by creation time',
    descendingByCreationTime: 'Descending by creation time',
    addView: 'Add View',
    editView: 'Edit View',
    delView: 'Delete View',
    searchWorkflow: 'Search Workflow',
    noWorkflow: 'There is currently no workflow to display, please create a new workflow manually',
    productWorkflow: 'Product Workflow',
    productWorkflowAbility: 'Capable of building, deploying, testing, and delivering versions with modular assembly',
    customWorkflow: 'Custom Workflow',
    customWorkflowAbility: 'Customizable workflow steps and free execution order',
    customWorkflowDocument: 'The Enterprise Edition supports new creation using templates, please refer to for details',
    releaseWorkflow: 'Release Workflow',
    releaseWorkflowAbility: 'The release process can be freely arranged, with the capabilities of data changes, configuration changes, grayscale release, etc',
    chooseWorkflowType: 'Choose Workflow Type',
    runProductWorkflow: 'Run Product Workflow',
    runWorkflow: 'Run Workflow',
    viewName: 'View Name',
    inputViewName: 'Please input view name',
    selectWorkflow: 'Select Workflow',
    addEmptyWorkflow: 'Create a new blank workflow',
    use: 'Use',
    customWorkflowTemplate: 'Custom Workflow Template',
    releaseWorkflowTemplate: 'Release Workflow Template',
    builtInTemplate: 'Built-in Template',
    selectTemplate: 'Select Template',
    deleteWorkflowTip: 'Delete workflow {name}',
    confirmWorkflowName: 'Confirm Workflow Name',
    delSuccess: 'Delete Success',
    inputWorkflowName: 'Please input workflow name',
    nameMismatch: 'workflow name mismatch',
    cancelDel: 'Cancel Delete Workflow',
    newWorkflowName: 'New Workflow Name',
    newWorkflowID: 'New Workflow ID',
    copyWorkflow: 'Copy Workflow',
    cancelCopyWorkflow: 'Cancel Copy Workflow',
    copyWorkflowSuccess: 'Copy Workflow Success',
    duplicateWorkflowName: 'Duplicate Workflow Name',
    addSuccess: 'Add Success',
    updateSuccess: 'Update Success',
    delScuuess: 'Delete Success',
    run: 'Run',
    starting: 'Starting',
    close: 'Close',
    open: 'Open',
    timer: 'Timer',
    timerOpenSuccess: 'Timer Open Success',
    timerCloseSuccess: 'Timer Close Success',
    inputWorkflowID: 'Please Input Workflow ID',
    customWorkflowTag: 'Custom',
    releaseWorkflowTag: 'Release',
    productWorkflowTag: 'Product',
    recentSuccess: 'Recent Success',
    recentFail: 'Recent Fail',
    averageExecutionTime: 'Average Execution Time',
    successRate: 'Success Rate',
    cancelFavoriteSuccess: 'Cancel Favorite Success',
    addFavoriteSuccess: 'Add Favorite Success',
    customWorkflowsDonotSupportCollections: 'Custom workflows do not currently support collections!',
    releaseWorkflowsDonotSupportCollections: 'Release workflows do not currently support collections!',
    updateBy: 'Update By',
    lastModify: 'Last Modify',
    historyTask: 'Task History',
    runStatus: 'Status',
    duration: 'Duration',
    executor: 'Executor',
    env: 'Environment',
    testResults: 'Test Results',
    clone: 'Clone',
    manualReview: 'Manual Review',
    workflowVars: 'Workflow Variables',
    cancelSuccess: 'Cancel Success',
    jobType: {
      build: 'Build',
      deploy: 'Deploy',
      approval: 'Approval',
      freestyle: 'Common',
      plugin: 'Plugin',
      test: 'Test',
      scan: 'Scan',
      distribute: 'Image Distribute',
      customDeploy: 'Kubernetes Deploy',
      canaryDeploy: 'Canary Deploy',
      canaryConfirm: 'Canary Release',
      blueGreenDeploy: 'blue-green Deploy',
      blueGreenConfirm: 'blue-green Release',
      k8sResourcePatch: 'Kubernetes Resource Patch',
      k8sGrayRollback: 'Gray Rollback',
      grayDeploy: 'Gray Release',
      istioRelease: 'Istio Release',
      istioRollback: 'Istio Rollback'
    },
    imageName: 'Image Name',
    deploymentEnv: 'Environment',
    deploymentService: 'Deployment Service',
    serviceStatusCheck: 'Service Status Check',
    notOpenServiceStatusCheck: 'Service status detection is not enabled',
    serviceStatusCheckPassed: 'Service status check passed',
    serviceStatusCheckFailed: 'Service status check failed',
    scanName: 'Scan Name',
    link: 'Link',
    view: 'View',
    projectName: 'Project Name',
    fileExport: 'File Export',
    testReport: 'Test Report',
    download: 'Download',
    k8sServiceName: 'K8s Service Name',
    containerName: 'Container Name',
    cluster: 'Cluster',
    namespace: 'Namespace',
    time: 'Time',
    message: 'Message',
    ui: 'UI',
    yaml: 'YAML',
    desc: 'Description',
    jobName: 'Job Name',
    buildName: 'Build Name',
    buildConfig: 'Build Config',
    varConfig: 'Var Config',
    branchConfig: 'Branch Config',
    storageConfig: 'Storage Config',
    sensitiveInformation: 'Sensitive Information',
    containerStatusDetection: 'Container Status Detection',
    scanConfig: 'Scan Config',
    chooseScan: 'Choose Scan',
    grayPercentage: 'Gray Percentage',
    grayTaskType: 'Gray Task Type',
    resourceName: 'Resource Name',
    updateContent: 'Update Content',
    job: 'Job',
    stage: 'Stage',
    stageName: 'Stage Name',
    concurrentExecution: 'Concurrent Execution',
    concurrentExecutionTip: 'When multiple different services are updated at the same time, the generated tasks will be executed concurrently to improve the workflow operation efficiency',
    preStep: 'pre Step',
    manualApproval: 'Manual Approval',
    approvalWay: 'Approval Way',
    reviewer: 'Reviewer',
    revieweNumber: 'Number of people to be reviewed',
    approvalApplication: 'Approval Application',
    selectApprover: 'Select Approver',
    addStage: 'Add Stage',
    editStage: 'Edit Stage',
    webhookType: 'Webhook Type',
    notifyEvents: 'Notify Events',
    webhookAddr: 'Webhook Addr',
    specifyMembersTip1: '@Designated members (enter the mobile phone number of the designated notification recipient, use ; to split, if it is empty, all members will be notified)',
    specifyMembersTip2: '@Specify members (enter the user_id of the specified notification receiver and use; to split)',
    specifyMembersTip3: '@Specify members (enter the user ID of the specified notification receiver, and use; split)',
    notifyType: {
      created: 'created',
      passed: 'passed',
      failed: 'failed',
      timeout: 'timeout',
      cancelled: 'cancelled',
      changed: 'changed',
      reject: 'reject',
      waitforapprove: 'waitforapprove'
    },
    addNotify: 'Add Notify',
    editNotify: 'Edit Notify',
    runPolicy: 'Run Policy',
    shareDirectory: 'Share Directory',
    inputShareDirectory: 'Please input share directory',
    addTrigger: 'Add Trigger',
    editTrigger: 'Edit Trigger',
    targetBranch: 'Target Branch',
    triggerStrategy: 'Trigger Strategy',
    workflowExecutionVariables: 'Workflow Execution Variables',
    triggerEvents: 'Trigger Events',
    baseType: {
      var: 'Variables',
      trigger: 'Trigger',
      notify: 'Notify',
      advancedSettings: 'Advanced Settings'
    },
    selectService: 'Select Service',
    distributionWay: 'Distribution Way',
    triggerWay: 'Trigger Way',
    timeConfig: 'Time Config',
    workflowParams: 'Workflow Params',
    addTimer: 'Add Timer',
    editTimer: 'Edit Timer',
    cronExpressionAnalysis: 'Cron Expression Analysis',
    addTest: 'Add Test',
    regularExpressionConfiguration: 'Regular Expression Configuration',
    inputRegExpressionConfiguration: 'Please input regular expression configuration',
    selectTargetBranch: 'Please select target branch',
    selectNotifyType: 'Please select Notify Type',
    inputWechatWebhook: 'Please input Wechat webhook',
    inputDingTalkWebhook: 'Please input DingTalk webhook',
    inputLarkWebhook: 'Please input Lark webhook',
    auditResults: 'Audit Results',
    auditTime: 'Audit Time',
    comments: 'Comments',
    specifyEnvironment: 'Specify Environment',
    specifyEnvironmentTip: 'Support workflow deployment to an environment by default',
    imageVersionRollback: 'Image Version Rollback',
    imageVersionRollbackTip: 'When the task running status and test results meet the settings of the rollback policy, the image version will automatically roll back to the previous version',
    setFallbackPolicy: 'Set Fallback Policy',
    saveAsTemplate: 'Save As Template',
    templateName: 'Template Name',
    inputTemplateName: 'Please input template name',
    pleaseSaveTrigger: 'Triggers can only be configured after saving the current workflow configuration',
    selectTriggerType: 'Select Trigger Type',
    gitTrigger: 'Git Trigger',
    codeChangeTrigger: 'Code Change Trigger',
    timedTrigger: 'Timed Trigger',
    baseInfo: 'Base Info',
    buildInfo: 'Build Info',
    deliveryList: 'Delivery List',
    versionInfo: 'Version Info',
    versionName: 'Version Name',
    versionDesc: 'Version Description',
    versionTag: 'Version Tag',
    productTest: 'Product Test',
    selectContainer: 'Select Container',
    noNeedToEnterVariables: 'No Need To Enter Variables',
    executeWithChangedCode: 'Run With Changed Code',
    fillInfoAndClickSave: 'Fill in the relevant information and click Save',
    advancedSetting: 'Advanced Setting',
    notUseWorkspaceCaching: "Don't use workspace caching",
    notUseWorkspaceCachingTip: 'It may increase the task duration. This setting is ignored if the workspace cache is not used in the build',
    notUseDockerCache: "Don't use Docker cache",
    notUseDockerCacheTip: 'It only takes effect for the build configured with image construction steps',
    quickSelectService: 'Quick Select Service',
    quickSelectServiceTip: 'Indirectly select the required service by specifying the build configuration',
    selectTest: 'Select Test',
    testConfig: 'Test Config',
    selectShareDirectory: 'Select Share Directory',
    enableSharedStorage: 'Enable Shared Storage',
    enableSharedStorageTip: 'The cluster has no shared storage resources, please go to "System Settings" - "Cluster Management" to configure',
    runtimeInput: 'Runtime Input',
    fixedvalue: 'Fixed Value',
    globalVariableOrotherTaskOutput: 'Global Variable Or Other Task Output',
    workflowTemplate: 'Workflow Template',
    atLeastOneStage: 'Please fill in at least one stage',
    inputStageJob: 'Please fill in the task in {name}',
    saveJobconfigFirst: 'Please save the task configuration first',
    atLeastOneJob: 'Please create at least one task',
    saveLastJobconfigFirst: 'Please save the previous task configuration first',
    confirmDelStage: 'Confirm delete "{name}" stage ?',
    duplicateJobName: 'Duplicate Job Name',
    inputTargetImage: `Please fill in the target image version in {serviceName}`
  },
  webhookType: {
    dingding: 'DingDing',
    wechat: 'Wechat',
    feishu: 'Feishu'
  },
  approvalType: {
    feishu: 'Feishu Approval',
    manualApproval: 'Manual Approval'
  },
  triggerWay: {
    timing: 'Timing Cycle',
    gap: 'Gap Cycle',
    crontab: 'Cron Expression'
  },
  productWorkflowSideBar: {
    base: 'Base Info',
    build: 'Build Deploy',
    artifact: 'Artifact',
    test: 'Test',
    distribute: 'Distribute',
    expand: 'Expand',
    trigger: 'Trigger',
    notify: 'Notify'
  },
  resetPolicy: {
    taskCompleted: 'Task Completed',
    deployFailed: 'Deploy Failed',
    testFailed: 'Test Failed'
  },
  productWorkflowStage: {
    buildv2: 'Build',
    build: 'Build Deploy',
    deploy: 'Deploy',
    artifact: 'Artifact Deploy',
    test: 'Test',
    testingv2: 'Test',
    release_image: 'Distribute',
    distribute: 'Distribute Deploy'
  },
  services: {
    common: {
      servicesManagement: 'Services Management',
      serviceOrchestration: 'Service Orchestration',
      inputServiceName: 'Please input service name',
      syncFromRepository: 'Sync from repository',
      syncFromTemplate: 'Create from template',
      searchService: 'Search service',
      updateService: 'Update service',
      createService: 'Create service',
      startupSequence: 'Startup sequence',
      detectedServiceModules: 'Detected Service Modules',
      detectedServiceModulesTooltip: 'Name of service container that can be updated',
      policySection: 'Policy',
      helpSection: 'Help',
      projectWithoutService: 'No service,please click',
      toCreateService: 'to create service',
      serviceModule: 'Service Module',
      serviceImageName: 'Image Name',
      serviceImageLabel: 'Label($IMAGE)',
      buildInfoAndOperation: 'Build/Operation',
      serviceBuild: 'Build',
      addServiceBuild: 'Add',
      addToEnv: 'Add to the environment'
    },
    k8s: {
      selectFileToSync: 'Please select the file or file directory to be synchronized',
      createServiceSyncFromRepo: 'Create service - Sync from repository',
      serviceNameMismatch: "The current service name and the selected folder name don't match, please select again",
      servicesIncluded: 'Services included:',
      inputByManual: 'Input by manual',
      serviceName: 'service name ',
      originProject: 'project name ',
      sharedService: 'Shared',
      sharedServicesList: 'Shared Services List',
      sharedServiceTooltip: 'Shared services can be used in other projects',
      addSharedServiceSuccess: 'Shared service has been successfully added',
      confirmToDeleteSharedService: 'Are you sure to remove this shared service {serviceName}?',
      deleteSharedServiceSuccess: 'Shared service has been successfully removed',
      setSharedServiceSuccess: 'The service is set up as a shared service',
      unsetSharedServiceSuccess: 'The service has been set as a non-shared service',
      confirmToDeleteService: 'Are you sure to delete this service {serviceName}?',
      importServiceSuccess: 'Service has been successfully imported',
      deleteServiceSuccess: 'Service has been successfully deleted',
      serviceIsNotSaved: 'The service configuration is not saved,save it now？',
      serviceNameIsDuplicated: 'Duplication of service names with existing names',
      checkServiceName: 'Name should only contain lowercase alphanumeric characters and -',
      importFromK8sNamespace: 'Import from K8s namespace',
      variablesSection: 'Variables',
      buildInVariables: 'System built-in variables',
      buildInVariablesTooltip: 'Referenced by $Namespace$, $Product$, $Service$, $EnvName$ in the service yaml',
      customVariables: 'Custom Variables',
      customVariablesTooltip: 'Custom variables are referenced by {{.key}}',
      currentValue: 'Current Value'
    },
    pm: {},
    helm: {
      imagesSection: 'Images',
      detectedServiceModulesTooltip: 'Images that can be updated in values.yaml',
      updateMatchRules: 'Update match rules',
      helmReleaseNameConfiguration: 'Helm Release Configuration',
      helmReleaseName: 'Release Name'
    }
  },
  environmentStatus: {
    updateable: 'Updateable',
    creating: 'Creating',
    running: 'Running',
    updating: 'Updating',
    succeeded: 'Succeed',
    unstable: 'Unstable',
    deleting: 'Deleting',
    error: 'Error',
    unknown: 'Unknown'
  },
  environments: {
    common: {
      environmentWithoutService: 'No service,please click',
      toCreateService: 'to create service',
      envName: 'Env Name',
      creationMethod: 'Method',
      selectCreationMethod: 'Creation Method',
      createNewEnv: 'New',
      copyEnv: 'Copy',
      copyFrom: 'Copy from',
      selectSourceEnv: 'Please select source env',
      selectResources: 'Resources',
      k8sCluster: 'Cluster',
      selectK8sCluster: 'Please select k8s cluster',
      k8sNamespace: 'Namespace',
      selectK8sNamespace: 'Select or customize namespace',
      namespaceAlreadyExistsTip: 'Services defined in Zadig will overwrite services of the same name in the selected namespace, please proceed with caution!',
      selectImageRepository: 'Please select image repository',
      services: 'Services',
      checkAllServices: 'Select all',
      clearServices: 'Clear',
      createEnv: 'Create',
      envIsCreating: 'Environment is createing...',
      inputEnvName: 'Please input environment name',
      checkEnvName: 'Name should only contain lowercase alphanumeric characters and -',
      selectServices: 'Please select services',
      environmentHasBeenSuccessfullyCreated: 'Environment has been successfully created',
      environmentCreationFailedWithError: 'Failed to create environment:{error}',
      environmentCreationUnstable: 'Environment has been successfully created(running unstable)',
      envCreation: 'Create Environment',
      envStatus: 'Status',
      runWorkflowToUpgradeService: 'Upgrade services through workflow',
      hostingEnv: 'Hosting',
      baseEnv: 'Base',
      subEnv: 'Sub-Env',
      enableShareEnvNotReadyTip: 'Note: Share-env mode is starting, the service will restart during the process, which will affect the normal access of the service for a short time, please be patient.',
      disableShareEnvNotReadyTip: 'Note: Share-env mode is being closed, the service will restart during the process, which will affect the normal access of the service for a short time, please be patient.',
      envChangeLog: 'Changelog',
      localCluster: 'Local',
      envOperation: 'Operation',
      updateTime: 'Update Time',
      updateEnvVariables: 'Update env variables',
      updateGlobalVariables: 'Update global variables',
      updateEnvVariablesTip: 'Update the variables referenced in the environment',
      creatingSubEnvironment: 'Create sub-env',
      serviceManagement: 'Service',
      addService: 'Add service',
      updateService: 'Update service',
      deleteService: 'Delete service',
      updateEnv: 'Update env',
      updateEnvTip: 'Updates based on the latest environment configuration, including service orchestration and service configuration changes',
      envConfig: 'Configuration',
      moreOperation: 'More',
      enableShareEnv: 'Enable share env',
      disableShareEnv: 'Disable share env',
      deleteEnv: 'Delete',
      hostingConfig: 'Config',
      cancelHosting: 'Cancel hosting',
      envEntrypoint: 'Entrypoint',
      getEnvInfoLoading: 'Loading the environment',
      ingressName: 'Ingress',
      ingressAddress: 'Address',
      getServiceInfoLoading: 'Loading the service list',
      searchService: 'Search service',
      serviceCounts: 'Service Counts:',
      serviceCountsUnit: '',
      imageInfo: 'Image',
      selectEnv: 'Select Environment',
      serviceDetail: {
        restartService: 'Restart',
        serviceStatus: 'Status',
        viewServiceConfigurationTooltip: 'View service configurations',
        basicOperation: 'Operation',
        serviceConfiguration: 'Configurations',
        exportYaml: 'Export Yaml',
        serviceManagement: 'Edit Service',
        serviceInstance: 'Service Instance',
        serviceReplicas: 'Replicas',
        restartServiceInstance: 'Restart',
        viewEvents: 'Events',
        instanceName: 'Name',
        instanceIp: 'IP',
        healthDetection: 'Health',
        serviceAge: 'Age',
        nodeInfo: 'Node',
        restartPod: 'Restart',
        podImage: 'Image',
        startTime: 'Start Time',
        podDebug: 'Exec',
        realTimeLog: 'Realtime Log',
        podName: 'Pod Name',
        containerName: 'Container Name',
        ingressHosts: 'Ingress Hosts',
        serviceEndpoints: 'Endpoints',
        startEphemeralContainer: 'Debug'
      }
    },
    config: {
      configuration: 'Configuration',
      address: 'Address',
      linkedServices: 'Services',
      volume: 'Volume',
      capacity: 'Capacity',
      accessModes: 'Access Modes',
      addConfigurationSuccess: 'Configuration has been added successfully',
      updateConfigurationSuccess: 'Configuration has been updated successfully',
      deleteConfigurationSuccess: 'Configuration has been deleted successfully',
      deleteConfigurationConfirm: 'Are you sure to delete {name} in environment {envName}?',
      versionHistory: 'Version History',
      compareTheSelectedVersions: 'Compare',
      version: 'Version',
      creationTime: 'Creation Time',
      lastModified: 'Last Modified',
      rollback: 'Rollback',
      currentVersion: 'Current version',
      versionIndex: 'Version {index}',
      selectVersionLimitation: 'Please select two versions for comparison',
      noVersionSelected: 'No version is selected',
      diffTitle: 'Diff of {newVersion} and {oldVersion}',
      pastePlaceholder: ' Please paste the K8s YAML file of type {currentConfig} directly'
    },
    changelog: {
      changelog: 'Changelog',
      APIPayloadDialogTitle: 'API Payload: {time}',
      noPayload: 'No payload',
      selectType: 'Please select type',
      username: 'Username',
      project: 'Project',
      function: 'Function',
      statusCode: 'Status Code',
      inputKeyword: 'Please input keyword to search',
      search: 'Search',
      time: 'Time',
      detail: 'Detail',
      APIPayload: 'API Payload',
      searchCompleted: 'Search completed'
    },
    k8s: {
      envRollback: 'Rollback',
      rollbackVersion: 'Version',
      selectVersion: 'Please select version',
      versionLabel: 'Version: {version} CreateAt: {time} Creator: {createBy}',
      globalVariables: 'Global Variables',
      servicewithoutImage: 'Please select image for this service {serviceName}',
      subEnvCreation: 'Create Sub-Environment',
      envConfigComp: {
        envConfiguration: 'Environment Configuration',
        addEnvConfiguration: 'Add environment configuration',
        importEnvConfigurationFromRepository: 'Environment configuration - import from repository',
        addEnvConfigurationPlaceholder: 'K8s yaml files of type Ingress, ConfigMap, Secret, PVC can be pasted directly',
        configuration: 'Configuration'
      },
      variableListComp: {
        preview: 'Preview',
        selectService: 'Select Service',
        selectServicePlaceholder: 'Please select service',
        relatedServices: 'Services'
      },
      serviceListComp: {
        serviceList: 'Service List',
        quickFilter: 'Quick Filter:',
        quickFilterFirstTip: 'Latest-Selection will choose the latest container image',
        quickFilterSecondTip: 'If the container image does not exist under the registry, the default image in the template will be selected',
        selectFilterMethod: 'Please select filter method',
        selectLatestImage: 'Latest-Selection',
        selectDefaultImage: 'Default-Selection',
        resourceDetection: 'Resource detection',
        resourceDetectionTip: 'Check if the resources defined in the service exist in the selected K8s namespace',
        onlyImport: 'Only import service',
        executeDeploy: 'Run deploy'
      }
    },
    helm: {
      variableListComp: {
        globalServiceVariables: 'Global Service Variables',
        serviceVariables: 'Service Variables'
      },
      serviceListComp: {
        searchService: 'Search service',
        onlyImport: 'Only import service',
        executeDeploy: 'Run deploy',
        previewValues: 'Preview the final values file',
        resourceDetectionTip: 'Release name already exists in the namespace',
        addValuesFile: 'Add values file'
      },
      keyValueComp: {
        title: 'Specify the key-value to be overwritten',
        inputKey: 'Please input key',
        inputValue: 'Please input value'
      },
      chartListComp: {
        serviceDeployStrategyTip: 'The service has not been deployed via Zadig and can be redeployed using the service configuration managed on Zadig by performing the "Update Service" operation',
        serviceConfigChangedTip: 'Update service configuration at the same time',
        updateServiceDialogTitle: 'Update service - {serviceName}',
        updateServiceConfigurationCheck: 'Update service configuration at the same time',
        updateValuesDialogTitle: 'Values - {serviceName}',
        chartName: 'Chart Name',
        chartDeployStatus: 'Deploy Status',
        deployStatusSuccess: 'Success',
        deployStatusFailed: 'Failed',
        deployStatusPending: 'Pendning',
        deployStatusNotDeployed: 'Not deploy',
        chartHasBeenUpdatedSuccessfully: '{serviceName} has been updated successfully'
      }
    },
    pm: {
      serviceList: 'Service List',
      secondTitle: 'Single service or microservice(custom scripting/Docker deployment)',
      smallTitle: '(Please link the host resources of the service, which can also be subsequently configured in the service)',
      linkToHosts: 'Please link to hosting resources',
      selectHosts: 'Please select the host you want to link to',
      createHost: 'Create host',
      projectResources: 'Project resources',
      systemResources: 'System resources'
    },
    hosting: {
      selectServices: 'Select Services',
      inputServiceNameToSearch: 'Input service name to search',
      serviceList: 'Service List',
      selectedServices: 'Selected Services',
      pleaseSelectServices: 'Please select services',
      serviceNameLabelTooltip: 'Project:{projectName} Env:{envName}'
    }
  },
  sysSetting: {
    integration: {
      accountsTab: 'Accounts',
      projectTab: 'Project Management',
      gitProvidersTab: 'Git Providers',
      configsTab: 'Config Management',
      jenkinsTab: 'Jenkins',
      sonarTab: 'Sonar',
      approvalSystemTab: 'Approval System',
      otherSystemTab: 'Other System',
      approvalSystemDocumentLink: 'Enterprise Edition supports Feishu approval process, please refer to for details',
      configsDocumentLink: 'The Enterprise Edition supports the integration of Nacos and Apollo, please refer to for details',
      gitProviders: {
        notIntegrated: 'The git provider has not yet been integrated, please integrate the git provider first and then continue.',
        provider: 'Provider',
        otherProvider: 'Other',
        giteeCE: 'Gitee(Community Edition)',
        giteeEE: 'Gitee(Enterprise Edition)',
        providerAlias: 'Alias',
        authStatus: 'Auth status',
        authSuccess: 'Success',
        authFailed: 'Failed',
        lastUpdated: 'Last updated',
        enableProxy: 'Enable proxy',
        editProvider: 'Edit',
        deleteProvider: 'Delete',
        tip: 'GitLab, GitHub, Gerrit, and Gitee integrations are supported,refer to the',
        addProviderTitle: 'Add Provider',
        editProviderTitle: 'Edit Provider',
        referToDoc: 'More configurations can be found in',
        appAuthCallbackTip: 'Callback address for application authorization:',
        appPermissionCheckTip: 'Please check the following permissions: ',
        otherProviderTipFirst: 'Support for standard Git protocol',
        otherProviderTipSecond: 'After integration, build/test templates can pull code from this provider',
        copyAddrSuccess: 'Copied to clipboard',
        copyAddrFailed: 'Copy failed',
        gitlabUrl: 'GitLab URL',
        gerritUrl: 'Gerrit URL',
        giteeUrl: 'Gitee URL',
        providerUrl: 'Provider URL',
        authMethod: 'Auth method',
        username: 'Username',
        password: 'Password',
        selectProvider: 'Please select provider',
        inputAddress: 'Please input URL, including the protocol',
        inputAccessToken: 'Please input access token',
        inputAppId: 'Please input client id',
        inputclientSecret: 'Please input client secret',
        inputUsername: 'Please input username',
        inputPass: 'Please input password',
        inputSSHKey: 'Please input SSH Key',
        inputPrivateAccessToken: 'Please input private access token',
        inputAlias: 'Please input alias',
        inputOtherProviderUrl: 'Please input provider URL',
        checkOtherProviderUrl: 'Please check the format',
        selectAuthMethod: 'Please select the authentication method',
        goToAuthorization: 'Go to authorize',
        proxyIsEnabled: 'Proxy is enabled',
        proxyIsDisabled: 'Proxy is disbaled',
        noProxy: 'No proxy configured, please go to "Settings" -> "Proxy Configuration" to configure proxy first!',
        proxyEnableFailed: 'Proxy configuration change faile:',
        getProxyConfigurationFailed: 'Failed to get proxy configuration:',
        confirmDeleteProvider: 'Are you sure to remove this provider?',
        deleteProviderSuccess: 'Provider has been removed',
        addProviderSuccess: 'Provider has been added',
        changeProviderInfoSuccess: 'Provider has been changed',
        changeProviderInfoSuccessAndGoToAuth: 'Provider has been changed,go to authorize'
      },
      accounts: {
        account: 'Account',
        accountType: 'Type',
        custom: 'Custom'
      }
    },
    packages: {
      addPackage: 'Add package',
      version: 'Version',
      versionExample: 'For example:1.0.0',
      enable: 'Enable',
      enableTooltip: 'Control whether packages are displayed in the package list, those in use are not affected',
      enableCurrentPackage: 'Enable current package',
      packageAddress: 'Package address',
      // eslint-disable-next-line no-template-curly-in-string
      packageAddressTooltip: 'The system automatically downloads and caches the installation package from the configuration address, which is available via the ${FILEPATH} variable',
      installScript: 'Install Script',
      editPackage: 'Edit package-{name} {version}',
      referToDoc: 'When running the build and test steps, install the necessary packages according to the actual business, for details, please refer to',
      enableProxy: 'Enable proxy',
      updateTime: 'Update Time',
      updator: 'Updator',
      inputPackageName: 'Please input package name',
      inputPackageVersion: 'Please input package version',
      inputInstallScript: 'Please input install script',
      inputPackageBinPath: 'Please input package bin path',
      addPackageSuccess: 'Add package successfully',
      addPackageFailed: 'Failed to add package',
      updatePackageSuccess: 'Update package successfully',
      updatePackageFailed: 'Failed to update package',
      packageHasBeenDeleted: 'Package has been deleted',
      cancelDelete: 'Deletion has been canceled',
      deleteTip: 'Deleting a package may affect the workflow being used, are you sure to delete the version {version} of {name}?',
      noProxy: 'No proxy configured, please go to "Settings" -> "Proxy Configuration" to configure proxy first!',
      proxyIsEnabled: 'Proxy is enabled',
      proxyIsDisabled: 'Proxy is disabled',
      changeProxyFailed: 'Failed to change proxy configuration:{error}',
      getProxyConfigurationFailed: 'Failed to get proxy configuration{error}'
    },
    images: {
      addImage: 'Add image',
      label: 'Label',
      imageName: 'Name',
      imageNamePlaceholder: 'repository address/namespace/name:label',
      editImage: 'Edit image',
      referToDoc: 'The project build, test and code scan can use a custom image as the base environment image, the custom image needs to add some necessary packages, for details, please refer to',
      inputLabel: 'Please input image label',
      inputImageName: 'Please input image name',
      deleteTip: 'Are you sure to delete the image {label}?',
      confirm: 'Confirm',
      imageHasBeenDeleted: 'Image has been deleted',
      addImageSuccess: 'Add image successfully',
      updateImageSuccess: 'Update image successfully'
    },
    plugins: {},
    registry: {},
    storage: {},
    helmRepo: {
      addHelmChartRepo: 'Add helm chart repo',
      editHelmChartRepo: 'Edit helm chart repo',
      urlPlaceholder: 'Please enter the URL starting with http/https/acr',
      repoName: 'Repo Name',
      inputRepoName: 'Please input repo name',
      username: 'Username',
      inputUsername: 'Please input username',
      inputPassword: 'Please input password',
      password: 'Password',
      referToDoc: 'Support the integration of self-built Harbor repository and Chart repository provided by Alibaba Cloud, Tencent Cloud, Huawei Cloud and other cloud vendors, for details, please refer to',
      lastModified: 'Last modified',
      protocolCheck: 'Please make sure the protocol starts with http/https/acr',
      inputUrl: 'Please input URL',
      deleteTip: 'Are you sure to delete the repo {repoName} ?',
      confirm: 'Confirm',
      repoHasBeenDeleted: 'Repo has been deleted',
      addRepoSuccess: 'Add repo successfully',
      updateRepoSuccess: 'Update repo successfully'
    },
    clusters: {},
    hosts: {},
    settings: {},
    users: {
      users: 'Users',
      systemRoles: 'System Roles',
      addUser: 'Add user',
      username: 'Username',
      password: 'Password',
      mail: 'Mail',
      nickname: 'Nickname',
      phone: 'Phone',
      role: 'Role',
      selectRole: 'Please select role',
      searchUser: 'Search user',
      inputNickname: 'Please input nickname',
      userRegistration: 'User registration',
      admin: 'Admin',
      loginInfo: 'Login info',
      notLoggedIn: 'Not logged in',
      source: 'Source',
      inputUsername: 'Please input username',
      inputMail: 'Please enter login email',
      checkMail: 'Please check the email address',
      inputPassword: 'Please input password',
      deleteUserTip: 'Are you sure to delete {type} user {name} ',
      tip: 'Tip',
      identityTypeSystem: 'System',
      userHasBeenDeleted: 'User has been deleted',
      cancelDelete: 'Deletion has been canceled',
      addImageSuccess: 'Add user successfully',
      changeUserRegistrationStatusSuccess: 'Change user registration status successfully',
      roleTip: 'Define system-level roles including data overview, insights, test center, delivery center, and permission control for template library',
      roleName: 'Role Name',
      roleDesc: 'Role Desc',
      permissionList: 'Permission List',
      deleteRoleTip: 'The member permission of this role will also be deleted, so please delete carefully',
      deleteRoleConfirm: 'Are you sure to delete the system role {name}',
      roleHasBeenDeleted: 'Role has been deleted successfully',
      inputRoleName: 'Please input role name',
      roleNameCheck: 'Only lowercase letters and numbers are supported for role name, and only hyphens are supported for special characters',
      addRoleSuccess: 'Add role successfully',
      updateRoleSuccess: 'Update role successfully',
      updateUserSuccess: 'Update user info successfully',
      updateUserInfoDialogTitle: 'Edit info of {name} '
    },
    announcement: {
      addAnnouncement: 'Add announcement',
      title: 'Title',
      priority: 'Priority',
      selectPriority: 'Please select priority',
      high: 'High',
      medium: 'Medium',
      low: 'Low',
      timeRange: 'Time Range',
      startTime: 'Start time',
      timeTo: 'To',
      endTime: 'End time',
      content: 'Content',
      editAnnouncement: 'Edit announcement',
      inputTitle: 'Please input title',
      inputContent: 'Please input content',
      selectStartTimeAndEndTime: 'Please select the start and end time',
      announcementHasBeenDeleted: 'Announcement has been deleted',
      addAnnouncementSuccess: 'Announcement has been successfully added',
      addAnnouncementFailed: 'Failed to add announcement',
      editAnnouncementSuccess: 'Announcement has been successfully edited',
      editAnnouncementFailed: 'Failed to edit announcement'
    },
    auditLog: {
      APIPayloadDialogTitle: 'API Payload: {time}',
      noPayload: 'No payload',
      selectType: 'Please select type',
      username: 'Username',
      project: 'Project',
      function: 'Function',
      statusCode: 'Status Code',
      inputKeyword: 'Please input keyword to search',
      search: 'Search',
      time: 'Time',
      detail: 'Detail',
      APIPayload: 'API Payload',
      searchCompleted: 'Search completed'
    }
  },
  testing: {
    title: 'Test',
    noTestsErrorMessage: 'There are no test cases, please create one.',
    searchTests: 'Search tests',
    caseCount: 'Case Count',
    executionCount: 'Execution Count',
    averageExecutionTime: 'Average Duration',
    successRate: 'Success Rate',
    creationSuccess: 'Task created.',
    restartSuccess: 'Task restarted.',
    cancellationSuccess: 'Task cancelled.',
    deletionConfirmation: 'Are you sure you want to delete {name}?',
    deletionSuccess: 'Test case deleted.',
    triggers: {
      workflowTriggers: 'Workflow Triggers',
      selectWorkflowTriggers: 'Create workflow triggers',
      selectWorkflowTriggersII: 'Please select workflow triggers, you can type in to search for workflows',
      creationSuccess: 'Workflow trigger created.',
      deletion: 'Delete workflow triggers',
      deletionSuccess: 'Workflow trigger deleted.',
      deletionCancellation: 'Deletion cancelled.',
      deletionConfirmation: 'Are you sure you want to delete trigger from workflow {name} ?'
    },
    details: {
      name: 'Test name',
      description: 'Description',
      parameters: 'Parameters',
      scripts: 'Script',
      report: {
        configuration: 'Test Report Configuration',
        junitReportDirectory: 'Junit Report Directory',
        htmlReportFileDirectory: 'HTML Report Filepath',
        htmlReportFileTooltip: 'HTML report file link will be sent with the IM message notification.'
      },
      advancedSettings: {
        title: 'Advanced Settings',
        exportReport: {
          title: 'Report Export',
          filePath: 'File Path',
          filePathExplanation: 'Choose directories to be downloaded in the test task detail page. It is commonly used for the export of the test log files.'
        },
        hooksAndNotification: {
          title: 'Hooks and Notifications',
          webhookTitle: 'Webhooks',
          timerTitle: 'Timers',
          notificationTitle: 'Notifications'
        }
      }
    },
    taskDetails: {
      exportArtifact: 'Artifact Export',
      basicInformation: {
        title: 'Basic Information',
        creator: 'Creator',
        canceller: 'Canceller',
        duration: 'Duration',
        retry: 'Retry',
        cancel: 'Cancel'
      },
      taskInfo: {
        head: 'Test Tasks',
        executionStatus: 'Status',
        report: 'Test Reports',
        view: 'View',
        exportedFile: 'Exported files',
        download: 'Download',
        status: 'Status',
        errorMessage: 'Error message',
        acknowledged: 'Acknowledged'
      },
      report: {
        overview: 'Test Report Overview',
        caseDetails: 'Case Details'
      },
      cases: {
        description: 'Description',
        result: 'Test Result',
        executionTime: 'Duration(s)'
      },
      logs: {
        fetchErrorMessage: 'Failed to fetch test logs.'
      }
    },
    validation: {
      testNameInsertionPrompt: 'Type in the test name.',
      testNameVaidationError: 'Name should only contain lowercase alphanumeric characters, - or _',
      testDescriptionInsertionPrompt: 'Type in the description',
      testReportDirectoryInsertionPrompt: 'Type in the directory for test report',
      testReportFileInsertionPrompt: 'Type in the filepath for the test report'
    },
    summary: {
      latest: 'Latest Test Report',
      caseCount: 'Total test cases',
      successCount: 'Success cases',
      failCount: 'Failed cases',
      errorCount: 'Error cases',
      unstartCount: 'Unstart cases',
      timeConsumption: 'Duration',
      checkCases: 'View',
      caseDetails: 'Case Details'
    },
    history: {
      title: 'History'
    },
    status: {
      success: 'Success',
      fail: 'Fail',
      unstart: 'Unstart',
      error: 'Error'
    },
    display: {
      failReason: 'Fail Reason:',
      failMessage: 'Fail Message:',
      failDetail: 'Fail Detail:',
      standardOut: 'Standard Output:',
      errorMessage: 'Error message:',
      errorDetail: 'Error detail:',
      errorType: 'Error type:'
    }
  },
  scanning: {
    title: 'Code Scanning',
    titleWithScanName: 'Code Scanning {name}',
    taskCreationSuccess: 'Scanning task Created',
    executor: 'Executor',
    canceller: 'Canceller',
    cancelTask: 'Cancel',
    timesRun: 'Times Run',
    averageDuration: 'Average Duration',
    taskStatus: 'Status',
    resultLink: 'Link',
    viewResultLink: 'View',
    advancedSettings: {
      title: 'Advanced Settings',
      hooksAndNotification: {
        title: 'Hooks and Notifications',
        webhookTitle: 'Webhooks'
      }
    },
    details: {
      basicInformation: 'Basic Information',
      description: 'Description',
      scanner: 'Scanner',
      scannerTypeOther: 'Other',
      image: 'Basic Image',
      packages: 'Packages',
      sonarAddress: 'Sonar Host',
      parameters: 'Sonar Parameter',
      preScanScript: 'Pre-scan Script',
      qualityGate: 'Quality Gate',
      scanningScript: 'Scanning Script'
    },
    prompt: {
      timeMismatch: 'Local time and server time mismatch, please sync time with the server.',
      inputScanningName: 'Type in scanning name',
      scanningNamingConvention: 'Name should only contain lowercase alphanumeric characters and -',
      inputDescription: 'Type in scanning description',
      chooseScanner: 'Select scanner',
      chooseImage: 'Select scanning basic image',
      imageCannotBeEmpty: 'Image cannot be empty',
      createImage: 'Create custom basic image',
      packageCannotBeEmpty: 'Package cannot be empty',
      selectSonarAddress: 'Select sonar host',
      sonarAddressCannotBeEmpty: 'Sonar host cannot be empty',
      sonarParameterPopup: 'Sonar host and token will automatically be injected during the execution of the task.',
      qualityGatePopup: 'Scanning task will fail if the scanning doesn\'t pass the quality gate',
      editConfirmation: 'Update',
      deleteConfirmation: 'Are you sure you want to delete scanning {scanningName}?',
      createNow: 'Create',
      created: 'Scanning {name} created!',
      updated: 'Scanning {name} updated！',
      deleted: 'Deleted',
      canceled: 'Scanning task cancelled',
      restarted: 'Scanning task restarted',
      searchForScanning: 'Search for scanning',
      noScanning: 'There are no scanning in this project, please create or update one.'
    }
  },
  repository: {
    prompt: {
      chooseBranchOrTag: 'Choose branch or tag',
      inputBranchOrTag: 'Input branch or tag',
      chooseBranch: 'Choose branch',
      getBranchErrorInputBranch: 'Failed to get branch info, please type in your branch',
      inputBranch: 'Input branch',
      choosePR: 'Choose pull request',
      inputPR: 'Input Pull Request ID',
      prDoesNotExist: 'Pull request doesn\'t exist. Type in the pull request ID. You can use comma to separate multiple requests',
      usePRorTagTemplate: 'Use ',
      selectGitProvider: 'Please select provider',
      selectRepo: 'Please select repository',
      selectBranch: 'Please select branch',
      selectOrgOrUsername: 'Please select org/user',
      selectFileOrFolder: 'Please select file or folder',
      inputAddress: 'Please input the URL, including the protocol'
    },
    info: {
      repository: 'Repository',
      provider: 'Provider',
      orgOrUser: 'Org/user',
      branch: 'Branch',
      org: 'Organization',
      enterprise: 'Enterprise',
      fileOrFolder: 'File(Folder)',
      creatorTemplate: 'Creator: ',
      creationTimeTemplate: 'Create Time: ',
      sourceBranchTemplate: 'Source Branch: ',
      targetBranchTemplate: 'Target Branch: '
    }
  },
  deliveryCenter: {
    versionManagement: 'Version Management',
    artifactsTracking: 'Artifacts Tracking',
    hookConfiguration: 'Hook Configuration',
    selectExternalSystem: 'Select external system',
    inputAccessAddress: 'Access address',
    versionName: 'Version',
    originProject: 'Project',
    versionTag: 'Tag',
    versionInfo: 'Version Info',
    creationTime: 'Creation Time',
    noVersion: 'No version information available at this time',
    helmStatus: {
      success: 'Success',
      failed: 'Failed',
      creating: 'Creating',
      retrying: 'Retrying',
      unknown: 'Unknown'
    },
    deleteVersion: 'Delete version',
    confirmToDeleteVersion: 'Are you sure to delete this version {version}?',
    versionHasBeenDeleted: 'Version has been deleted',
    deletionCancellation: 'Deletion cancelled',
    configurationHasBeenUpdated: 'Configuration has been updated',
    deliveryContent: 'Delivery Content',
    deliveryProgressDetails: 'Progress Details',
    uploadChartAndImage: 'Upload charts and images',
    uploadStatus: {
      success: 'Success',
      failed: 'Failed',
      waiting: 'Waiting',
      uploading: 'Uploading',
      creating: 'Creating',
      retrying: 'Retrying',
      undefine: 'Unknown'
    },
    chartInfo: 'Chart Info',
    chartName: 'Chart Name',
    chartRepo: 'Chart Repo',
    chartVersion: 'Version',
    offlinePkgInfo: 'Offline Package Info',
    offlinePkgName: 'Offline Package Name',
    componentName: 'Component',
    imageName: 'Image Name',
    objectStorage: 'Object Storage',
    retrySuccess: 'Retried successfully',
    artifactType: 'Type',
    artifactName: 'Name',
    repoName: 'Repository',
    inputRepoName: 'Input repo',
    inputRepoBranch: 'Branch',
    inputKeyword: 'Keyword',
    selectArtifactType: 'Artifact Type',
    selectFilterType: 'Filter',
    imageSize: 'Image Size',
    commitMessage: 'Commit Message',
    noArtifact: 'No artifacts at this time, please select the type you need to filter',
    fileInfo: 'File Info',
    architecture: 'Architecture',
    operatingSystem: 'OS',
    buildInfo: 'Build Info',
    commitAuthorName: 'Author',
    activeTimeline: 'Timeline',
    activeTimelineContent: 'Content',
    namespace: 'Namespace',
    deployEnv: 'Env Name',
    addComment: 'Add comment',
    inputCommentContent: 'Please input comment content',
    viewServiceConfiguration: 'View service configurations',
    serviceConfiguration: 'Configuration',
    imageAndServiceConfiguration: 'Images And Service Configurations',
    serviceAndServiceModule: 'Name(Module Name)',
    packageInfo: 'Package Info',
    packageFileName: 'Package File Name',
    serviceStartupSequence: 'Service Startup Sequence',
    startupSequence: 'Startup Sequence',
    releaseCurrentVersion: 'Release current version',
    jiraInfo: 'Jira Info',
    jiraIssues: 'Jira Issues',
    issueReporter: 'Reporter',
    issueAssignee: 'Assignee',
    issuePriority: 'Priority'
  },
  dataStatistics: {
    overview: {
      overview: 'Overview',
      clusters: 'Clusters',
      clustersUnit: '',
      projects: 'Projects',
      projectsUnit: '',
      services: 'Services',
      servicesUnit: '',
      workflows: 'Workflows',
      workflowsUnit: '',
      environments: 'Environments',
      environmentsUnit: '',
      artifacts: 'Artfacts',
      artifactsUnit: '',
      successRate: 'Success Rate',
      automationOfProcesses: 'Automation Of Processes',
      buildAutomation: 'Duild Automation',
      totalBuilds: 'Total',
      recentBuilds: 'Last 30 days',
      deployAutomation: 'Deploy Automation',
      totalDeploys: 'Total',
      recentDeploys: 'Last 30 days',
      testAutomation: 'Test Automation',
      totalTestCases: 'TestCases',
      totalExecutionCount: 'Execution Count',
      averageDuration: 'Average Duration(s)'
    },
    insight: {
      buildInsight: 'Build Insight',
      buildTrend: 'Build trend(Week)',
      buildHealthiness: 'Healthiness of the build',
      lastBuilds: 'Last builds',
      dailyBuildFrequency: 'Frequency of daily build',
      averageBuildDuration: 'Average duration of build',
      longestDurationBuild: 'Longest duration of build',
      testInsight: 'Test Insight',
      testTrend: 'Test trend(Week)',
      testHealthiness: 'Healthiness of the test',
      averageTestDuration: 'Average duration of test',
      testBenefits: 'Weekly test benefits (number of executions * test cases)',
      deliveryDeployByWeek: 'Number of weekly delivery deployments',
      deployInsight: 'Deploy Insight',
      serviceHealthiness: 'Healthiness of the microservice',
      serviceDeploymentStatistics: 'Top 5 microservice deployment statistics',
      serviceDeploymentFailedStatistics: 'Top 5 microservice deployment failure statistics',
      frequencyOfWeeklyDeployments: 'Frequency of weekly deployments',
      taskStatus: 'Status',
      taskId: 'ID',
      taskTime: 'Time',
      numberOfFailures: 'Failures',
      taskDuration: 'Duration',
      selectProject: 'Select project',
      startTime: 'Start time',
      endTime: 'End time',
      lastWeek: 'Last week',
      lastMonth: 'Last month',
      lastThreeMonths: 'Last 3 months',
      lastYear: 'Last year'
    }
  },
  build: {
    buildName: 'Build Name',
    testEnv: 'Test Environment',
    buildEnv: 'Build Environment',
    buildType: 'Build Type',
    buildTypeZadig: 'Zadig',
    buildTypeJenkins: 'Jenkins',
    image: 'Image',
    useTemplate: 'Use template',
    customize: 'Customize',
    packages: 'Packages',
    variableKey: 'Parameters',
    variableOptions: 'Options',
    systemTestVariables: 'Built-in Test Parameters',
    systemBuildVariables: 'Built-in Build Parameters',
    testVariables: 'Custom Test Parameters',
    buildVariables: 'Custom Build Parameters',
    imageNamingRules: 'Image Naming Rules',
    secretParameter: 'Secret',
    secretParameterTooltip: 'If a parameter is set to be secret, Zadig will encrypt this parameter so it will not be displayed in the workflow logs',
    addSteps: 'Add Steps',
    stepImageBuild: 'Image Build',
    stepArtifactUpload: 'Upload Artifact Package',
    stepFileUpload: 'Upload File',
    stepRunShellScript: 'Shell Script',
    buildContextDirectory: 'Build Context',
    dockerfileSource: 'Dockerfile Source',
    dockerfileAbsolutePath: 'The absolute path of Dockerfile',
    dockerBuildArgs: 'Docker Build Args',
    jenkinsBuildArgs: 'Jenkins Build Parameters',
    artifactPath: 'Location of the artifact package',
    uploadFile: 'Upload File',
    variables: 'Build Parameters',
    commonScript: 'Common Build Script',
    minute: 'Minute',
    specialAdd: 'Add',
    saveBuild: 'Save',
    updatedBy: 'Modified By',
    saveAsTemplate: 'Save as Template',
    timeout: 'Timeout',
    preview: 'Preview',
    prompt: {
      select: 'Select',
      selectTemplate: 'Select a template',
      selectImage: 'Select an image',
      packageCannotBeEmpty: 'Package cannot be empty',
      variableOptions: 'Options can be split by comma',
      useSystemImageNamingRules: 'Using the built-in $IMAGE parameter, for more information, check:',
      noImageRegistry: 'No Image Registry, visit System Settings -> Registry to add one',
      dockerBuildArgs: 'All docker build args are supported',
      selectObjectStorage: 'Select object storage',
      runShellScriptDescription: 'This shell script will be run after the build script is done.',
      fillInDockerBuildWorkingDirectory: 'Fill in the working directory of docker build.',
      fillInDockerfilePath: 'Fill in the path of the Dockerfile',
      fillInPath: 'Fill in the path.',
      selectInDockerfileTemplate: 'Select a dockerfile template',
      selectBuildTemplate: 'Select a build template',
      fillInArchiveFilePath: 'Fill in the path of the artifact',
      atLeastUploadOneFile: 'Add at least one file.',
      uploadFilePathEmpty: 'Upload file path is empty.',
      buildRepoNotification: 'Repository will be configured when creating a build from template.',
      fillInBuildName: 'Fill in the build name',
      buildNameConvention: 'Build name should only contain lowercase alphanumeric characters and -',
      buildSaved: 'Build saved',
      buildCreated: 'Build updated',
      buildDeleted: 'Build deleted',
      saveAsTemplate: 'Save this build as a template for the system. All the repository information will be removed in the template, please confirm!',
      fillInBuildTemplateName: 'Fill in the build template name',
      templateNameIsDuplicated: 'Build template name already existed.',
      templateSaved: 'Template saved.',
      saveAsTemplateCanceled: 'Cancelled.',
      searchForBuild: 'Search for build.',
      noExistingBuild: 'There are not existing build, create one.',
      deleteWithoutReference: 'Are you sure to delete template {name} ?',
      deleteWithReference: 'This template is used by {reference}, are you sure to delete {name}?',
      chooseJenkins: 'Select Jenkins system.',
      buildNameCannotBeEmpty: 'Build name cannot be empty.',
      jobsCannotBeEmpty: 'Jobs cannot be empty.',
      jenkinsBuildArgs: 'There must be a parameter called IMAGE in Jenkins build parameters，its value will be used to deploy the service when the build stage is done.',
      selectBuildTemplateII: 'Select a build template'
    },
    advancedSettings: {
      title: 'Advanced Settings',
      strategy: 'Strategy',
      sharedStorage: 'Shared Storage',
      cache: 'Cache',
      workspace: 'Workspace',
      customCacheDirectory: 'Custom Cache Directory',
      directory: 'Directory',
      resourceConfig: 'Resources And Clusters',
      cluster: 'Cluster',
      selectClusterPrompt: 'Choose your cluster',
      productionCluster: 'Production Cluster',
      nonProductionCluster: 'Non-Production Cluster',
      resource: 'Resources',
      selectResourcePrompt: 'Choose the resource required',
      resourceTypeHigh: 'High | CPU: 16 Core Mem: 32 GB',
      resourceTypeMedium: 'Medium | CPU: 8 Core Mem: 16 GB',
      resourceTypeLow: 'Low | CPU: 4 Core Mem: 8 GB',
      resourceTypeMinimum: 'Minimum | CPU: 2 Core Mem: 2 GB',
      resourceTypeCustom: 'Customize',
      customizeCPUResource: 'Customize CPU',
      customizeMemoryResource: 'Customize Memory',
      customizeGPUResource: 'Customize GPU',
      memoryLabel: 'Memory (Mi)',
      customizeGPUTooltip: 'Fill in the config annotation for the GPU resources, e.g.: nvidia.com/gpu: 1',
      useHostDockerDaemon: 'Use the host Docker daemon',
      parameterPassing: 'Parameter Passing',
      parameterPassingTooltipProductWorkflow: 'Define the environment variables in the scripts as output parameter so it can be used by other task',
      parameterPassingTooltipCustomWorkflow: 'Define the environment variables in the scripts as output parameter so it can be used by other job of the custom workflow',
      typeInVariable: 'Fill in the Variables',
      typeInCacheDirectory: 'Fill in the absolute path of the directory, such as $WORKSPACE/.m2',
      typeInCustomCPUResource: 'Fill in the CPU you need',
      typeInCustomMemoryResource: 'Fill in the Memory you need',
      typeInCustomGPUResource: 'Fill in the GPU request annotation',
      typeInCorrectNumber: 'Fill in the correct number',
      paramaterNamingConvention: 'Parameter Key should only contain lowercase alphanumeric characters and -, and starts with a letter'
    }
  },
  systemVariables: {
    encrypted: '',
    workspace: 'Workspace of the build script',
    workflowTaskID: 'Workflow task ID',
    image: 'Image full name of the build task.',
    updateImageNamingRulesPrompt: 'Update image naming rules',
    artifact: 'Artifact full name of the build task',
    updateArtifactNamingRulesPrompt: 'Update artifact naming rules',
    service: 'The service name to be build.',
    serviceModule: 'The service module name to be build.',
    artifactPath: 'The path of the built artifact.',
    buildEnvName: 'Environment name of the build task.',
    buildTaskLink: 'The link to the build task',
    ci: 'A Variable to indicate that this is a CI/CD environment. Its value will always be true',
    // eslint-disable-next-line no-template-curly-in-string
    repoIndex: 'The name of the repository at <index> position, all - in this name will be replaced by _. This is 0-indexed. ',
    // eslint-disable-next-line no-template-curly-in-string
    repoNameIndex: 'The name of the repository at <index> position. This is 0-indexed. ',
    // eslint-disable-next-line no-template-curly-in-string
    repoPR: 'The PR info of a <REPO>. This can be used alone or with $REPO_<index>, for example: eval PR=\${${REPO_0}_PR} to get the PR information of the first repository',
    // eslint-disable-next-line no-template-curly-in-string
    repoBranch: 'The branch info of a <REPO>. This can be used alone or with $REPO_<index>, for example: eval BRANCH=\${${REPO_0}_BRANCH} to get the branch information of the first repository',
    // eslint-disable-next-line no-template-curly-in-string
    repoTag: 'The tag info of a <REPO>. This can be used alone or with $REPO_<index>, for example: eval TAG=\${${REPO_0}_TAG} to get the tag information of the first repository',
    // eslint-disable-next-line no-template-curly-in-string
    repoCommitID: 'The commit info of a <REPO>. This can be used alone or with $REPO_<index>, for example: eval COMMIT=\${${REPO_0}_COMMIT} to get the commit information of the first repository',
    // eslint-disable-next-line no-template-curly-in-string
    otherTypeRepoWarning: 'If you are using repository of other type, you cannot use $<REPO>_PR and $<REPO>_COMMIT_ID',
    linkedEnv: 'The namespace of the tested environment.',
    testEnvName: 'The environment of the tested environment.',
    testTaskLink: 'The link to the build task',
    // eslint-disable-next-line no-template-curly-in-string
    testServices: 'A list or services to be updated by the workflow, seprated by comma. It is recommended to use array=(${SERVICES//,/ } to convert the value into an array',
    zadig: 'A Variable to indicate that this is a zadig environment. Its value will always be true'
  },
  timeFormate: {
    seconds: 's',
    minutes: 'min'
  },
  dashboard: {
    addCard: 'Add Card',
    noCard: 'No Card',
    my_workflow: 'My Workflow',
    my_env: 'My Environment',
    running_workflow: 'Running Workflow',
    runningTip: 'Display the list of running workflows in the system',
    myWorkflowTip: 'Display the list of workflows that I follow',
    myEnvTip: 'Display personal environment and service information',
    delSuccess: 'Delete Success',
    confirmDelCard: 'Confirm Delete Card [{name}] ?'
  }
}
